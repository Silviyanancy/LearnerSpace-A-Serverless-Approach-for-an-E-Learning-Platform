#Course requirements
type Course
  #@model directive - to create database tables in dynamodb to perform CRUD operatioons
  #creates dynamodb table for the course type - creates VTL template to handle CRUD
  #1. Store objects in DynamoDB
  #2. Configure CRUD resolvers
  #Here it will not create subscriptions (no real-time updates), but create mutation (for updates) and queries (to query and read)
  @model(subscriptions: null)
  #“@auth directive” to create authorization rules for the entity types.
  @auth(
    rules: [
      #allow only admins to create, update and delete courses
      { allow: groups, groups: ["Admin"] }
      #allow all authenticated users to view courses
      { allow: private, operations: [read] }
      #allow all guest users (everyone - guests & users) to view courses
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String!
  #video
  image: String!
  instructor: String!
  popular: Boolean
  price: Float!
  #“@connection attribute” from Amplify Library to set up the relationships among the entity types
  orders: [CourseOrder] @hasMany(indexName: "byCourse", fields: ["id"])
}

#CourseOrder requirements - many-to-many relationship
type CourseOrder
  #database
  @model(queries: null, subscriptions: null)
  #@key directive” to create indexes for the tables to optimize the query efficiency.
  #@key(name: "byCourse", fields: ["course_id", "order_id"])
  #@key(name: "byUserOrder", fields: ["order_id", "course_id"])
  @auth(
    rules: [
      #allow only admins to create courseorders using user emailid in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  course_id: ID! @index(name: "byCourse", sortKeyFields: ["order_id"])
  order_id: ID! @index(name: "byUserOrder", sortKeyFields: ["course_id"])
  course: Course @hasOne(fields: ["course_id"])
  order: UserOrder @hasOne(fields: ["order_id"])
}

#UserOrder Requirements
type UserOrder
  @model(subscriptions: null)
  #@key(name: "byUser", fields: ["user"])
  @auth(
    rules: [
      #only the owner can see is order
      { allow: owner, identityClaim: "email", ownerField: "user" }
      #allow admins to view the order
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  user: String! @index(name: "byUser")
  date: String
  total: Float
  courses: [CourseOrder] @hasMany(indexName: "byUserOrder", fields: ["id"])
}

#input types
#Status of order
enum StatusofOrder {
  SUCCESS
  FAILED
}

#items in cart
input ItemsinCart {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

#ProcessOrder
input ProcessOrderInput {
  id: ID!
  cart: [ItemsinCart]
  subtotal: Float!
  token: String!
  address: String
}

#Mutation type
type Mutation {
  processOrder(input: ProcessOrderInput!): StatusofOrder
    @function(name: "paymentProcess-${env}")
    @function(name: "orderCreation-${env}")
}
